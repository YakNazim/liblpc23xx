ARM GAS  lpc23xx-binsem/lpc23xx-binsem.s 			page 1


   1              	
   2              	/*
   3              	 * lpc23xx-binsem.s
   4              	 */
   5              	
   6              	/*
   7              	 *  http://en.wikipedia.org/wiki/Application_binary_interface#EABI
   8              	 *
   9              	 *  EABI says r0-r3 are reserved for calling and return
  10              	 *
  11              	 *  The EABI standard dictates that the ARM Stack be:
  12              	 *  "Full Descending" which means that stores need to decrement beforehand and loads must increment
  13              	 *  afterward. You can use the actual addressing types "DB" and "IA" or just "FD" on the assembly i
  14              	 */
  15              	
  16              	/*
  17              	 * FOR ARM:
  18              	 * sp is r13
  19              	 * lr is r14
  20              	 * pc is r15
  21              	 */
  22              	
  23              	.text
  24              	
  25              	# generate 32 bit ARM 
  26              	.code           32
  27              	
  28              	# align on 4 byte (word) boundary
  29              	.align          4
  30              	
  31              	# defining constants
  32              	.equ LOCKED    , 0
  33              	.equ UNLOCKED  , 1
  34              	
  35              	# renaming registers
  36              	binsem_addr .req r0
  37              	cycles      .req r1
  38              	
  39              	/*
  40              	 * init_binsem
  41              	 *  r0 contains address of semaphore, need to initialize semaphore to non-zero value
  42              	 *  prior to using.
  43              	 *
  44              	 * In C define prototype: void init_binsem(uint32_t *binsem_addr);
  45              	 */
  46              	.global init_binsem
  47              	init_binsem:
  48              	    ### prolog ###
  49 0000 F00F2DE9 	    stmdb sp!, {r4-r11}
  50              	
  51 0004 0040A0E1 	    mov r4, binsem_addr
  52              	
  53 0008 0150A0E3 	    ldr r5, =UNLOCKED
  54 000c 955004E1 	    swp r5, r5, [r4]
  55              	
  56              	    ### epilog ###
  57 0010 F00FBDE8 	    ldmia sp!, {r4-r11}
ARM GAS  lpc23xx-binsem/lpc23xx-binsem.s 			page 2


  58              	
  59 0014 0000A0E3 	    mov r0, #0
  60 0018 0EF0A0E1 	    mov pc, lr
  61              	
  62              	/*
  63              	 * is_binsem_locked
  64              	 * input: r0 contains binsem_addr
  65              	 *
  66              	 * return: 1 if locked 
  67              	 *         0 if not locked 
  68              	 * in C define prototype: uint32_t is_binsem_locked(uint32_t* binsem_addr);
  69              	 */
  70              	.global is_binsem_locked
  71              	is_binsem_locked:
  72              	    ### prolog ###
  73              	    # store multiple, decrement before. '!' says to write back new value to sp
  74 001c F00F2DE9 	    stmdb sp!, {r4-r11}
  75              	
  76 0020 0040A0E1 	    mov r4, binsem_addr
  77              	
  78 0024 005094E5 	    ldr r5, [r4]
  79 0028 000055E3 	    cmp r5, #LOCKED
  80 002c 0000000A 	    beq is_locked
  81 0030 000000EA 	    b   not_locked
  82              	
  83              	is_locked:
  84 0034 0150A0E3 	    mov r5, #1
  85              	
  86              	not_locked:
  87 0038 0050A0E3 	    mov r5, #0
  88              	
  89              	    ### epilog ###
  90              	    # load multiple, increment after. '!' says to write back new value to sp
  91 003c F00FBDE8 	    ldmia sp!, {r4-r11}
  92              	
  93              	    # return value goes into r0, here it's zero
  94              	    # return value into r0
  95 0040 0500A0E1 	    mov r0, r5
  96              	    # lr contains address of next instruction after function
  97 0044 0EF0A0E1 	    mov pc, lr
  98              	
  99              	
 100              	/*
 101              	 * get_binsem
 102              	 * in: binsem_addr is r0
 103              	 *      wait_count is r1
 104              	 * return: a '1' for successful lock
 105              	 *         a '0' if wait for cycles count and not successful
 106              	 * In C define prototype: uint32_t get_binsem(uint32_t* binsem_addr, uint32_t wait_count);
 107              	 */ 
 108              	.global get_binsem
 109              	get_binsem:
 110              	    ### prolog ###
 111              	    # store multiple, decrement before. '!' says to write back new value to sp
 112 0048 F00F2DE9 	    stmdb sp!, {r4-r11}
 113              	
 114 004c 0040A0E1 	    mov r4, binsem_addr
ARM GAS  lpc23xx-binsem/lpc23xx-binsem.s 			page 3


 115 0050 0150A0E1 	    mov r5, cycles
 116              	
 117 0054 0060A0E3 	    ldr r6, =LOCKED
 118              	
 119              	spin_lock:
 120              	    # r1 is an indirect address (note '[' and ']')
 121 0058 966004E1 	    swp r6, r6, [r4]
 122              	    # use immediate value of LOCKED constant
 123 005c 000056E3 	    cmp r6, #LOCKED
 124 0060 0000000A 	    beq waitcount
 125 0064 030000EA 	    b gotlock
 126              	
 127              	waitcount:
 128 0068 015045E2 	    sub r5, #0x1
 129 006c 000055E3 	    cmp r5, #0x0
 130 0070 0100000A 	    beq timeout
 131 0074 F7FFFFEA 	    b spin_lock
 132              	 
 133              	gotlock:
 134 0078 0150A0E3 	    mov r5, #1
 135              	
 136              	timeout:
 137 007c 0050A0E3 	    mov r5, #0
 138              	
 139              	    ### epilog ###
 140 0080 F00FBDE8 	    ldmia sp!, {r4-r11}
 141              	
 142              	    # move return value into r0
 143 0084 0500A0E1 	    mov r0, r5
 144              	    # lr contains address of next instruction after function
 145 0088 0EF0A0E1 	    mov pc, lr
 146              	
 147              	/*
 148              	 * release_binsem
 149              	 * input: r0 is binsem_addr
 150              	 * returns a '1' for release of locked binary semaphore
 151              	 * returns a '0' for release of unlocked binary semaphore
 152              	 * in C define prototype: uint32_t release_binsem(uint32_t* binsem_addr);
 153              	 */ 
 154              	.global release_binsem
 155              	release_binsem:
 156              	    ### prolog ###
 157 008c F00F2DE9 	    stmdb sp!, {r4-r11}
 158              	
 159 0090 0040A0E1 	    mov r4, binsem_addr
 160              	  
 161 0094 0150A0E3 	    ldr r5, =UNLOCKED
 162              	   
 163 0098 955004E1 	    swp r5, r5, [r4]
 164              	    
 165 009c 010055E3 	    cmp r5, #UNLOCKED
 166 00a0 0100000A 	    beq was_not_locked
 167 00a4 FFFFFFEA 	    b released_lock
 168              	 
 169              	released_lock:
 170 00a8 0150A0E3 	    mov r5, #1
 171              	
ARM GAS  lpc23xx-binsem/lpc23xx-binsem.s 			page 4


 172              	was_not_locked:
 173 00ac 0050A0E3 	    mov r5, #0
 174              	
 175              	    ### epilog ###
 176 00b0 F00FBDE8 	    ldmia sp!, {r4-r11}
 177              	
 178              	    # move return value into r0
 179 00b4 0500A0E1 	    mov r0, r5
 180              	
 181 00b8 0EF0A0E1 	    mov pc, lr
 182              	
 183 00bc 0000A0E1 	.end
ARM GAS  lpc23xx-binsem/lpc23xx-binsem.s 			page 5


DEFINED SYMBOLS
lpc23xx-binsem/lpc23xx-binsem.s:26     .text:0000000000000000 $a
lpc23xx-binsem/lpc23xx-binsem.s:32     *ABS*:0000000000000000 LOCKED
lpc23xx-binsem/lpc23xx-binsem.s:33     *ABS*:0000000000000001 UNLOCKED
lpc23xx-binsem/lpc23xx-binsem.s:47     .text:0000000000000000 init_binsem
lpc23xx-binsem/lpc23xx-binsem.s:71     .text:000000000000001c is_binsem_locked
lpc23xx-binsem/lpc23xx-binsem.s:83     .text:0000000000000034 is_locked
lpc23xx-binsem/lpc23xx-binsem.s:86     .text:0000000000000038 not_locked
lpc23xx-binsem/lpc23xx-binsem.s:109    .text:0000000000000048 get_binsem
lpc23xx-binsem/lpc23xx-binsem.s:119    .text:0000000000000058 spin_lock
lpc23xx-binsem/lpc23xx-binsem.s:127    .text:0000000000000068 waitcount
lpc23xx-binsem/lpc23xx-binsem.s:133    .text:0000000000000078 gotlock
lpc23xx-binsem/lpc23xx-binsem.s:136    .text:000000000000007c timeout
lpc23xx-binsem/lpc23xx-binsem.s:155    .text:000000000000008c release_binsem
lpc23xx-binsem/lpc23xx-binsem.s:172    .text:00000000000000ac was_not_locked
lpc23xx-binsem/lpc23xx-binsem.s:169    .text:00000000000000a8 released_lock

NO UNDEFINED SYMBOLS
